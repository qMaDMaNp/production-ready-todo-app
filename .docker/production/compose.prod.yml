version: '3'

services:
  server:
    build: ../../server
    restart: unless-stopped
    depends_on:
      - mongodb

  client:
    build: ../../client
    restart: unless-stopped
    environment:
      NODE_ENV: production

  webserver:
    build: ./nginx
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # - web-root:/var/www/html
      - ./nginx/nginx-conf:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - dhparam:/etc/ssl/certs
    depends_on:
      - client
      - server
    networks:
      - app-network
  
  mongodb:
    container_name: $MONGODB_CONTAINER_NAME
    image: mongo:7.0.6
    env_file: ./.env
    environment:
    #   MONGO_INITDB_ROOT_USERNAME: $MONGODB_ROOT_USERNAME
    #   MONGO_INITDB_ROOT_PASSWORD: $MONGODB_ROOT_PASSWORD
      MONGO_INITDB_DATABASE: $MONGODB_DATABASE
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27018'}]}) }" | mongosh --port 27018 --quiet
      interval: 60s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - "production-todo-db_data:/data/db"
      - "production-todo-db_config:/data/configdb"

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   ports:
  #     - 9090:9090
  #   restart: unless-stopped
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - prom_data:/prometheus

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - 3001:3000
  #   restart: unless-stopped
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=grafana
  #   volumes:
  #     - ./grafana:/etc/grafana/provisioning/datasources

  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:latest
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro

  # node-exporter:
  #   image: prom/node-exporter:latest
  #   ports:
  #     - "9100:9100"

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      # - web-root:/var/www/html
    command: certonly --webroot --webroot-path=/var/www/html --email mymail@gmail.com --agree-tos --no-eff-email --force-renewal -d local-todo.com -d www.local-todo.com
    depends_on:
      - webserver

volumes:
  production-todo-db_data:
  production-todo-db_config:
  # prom_data:
  certbot-etc:
  certbot-var:
  # web-root:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     device: /home/madman/node_project/views/
  #     o: bind
  dhparam:
   driver: local
   driver_opts:
     type: none
     device: /home/node/server/app/dhparam/
     o: bind

networks:
  app-network:
    driver: bridge

